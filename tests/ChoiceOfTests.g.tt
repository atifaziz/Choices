<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region Copyright (c) 2018 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

namespace Choices.Tests
{
    using System;
    using System.Globalization;
    using NUnit.Framework;
    using static Choice.New;
    using Int1 = Box1<int>;
    using Int2 = Box2<int>;
    using Int3 = Box3<int>;
    using Int4 = Box4<int>;
    using Str1 = Box1<string>;
    using Str2 = Box2<string>;
    using Str3 = Box3<string>;
    using Str4 = Box4<string>;

    [TestFixture]
    partial class ChoiceOfTests
    {<#
    foreach (var d in
        from d in Enumerable.Range(1, 4).Skip(1)
        let ds = Enumerable.Range(1, d)
        select new
        {
            Ord   = d,
            Seq   = ds,
            Text  = d.ToString(CultureInfo.InvariantCulture),
            TInts = string.Join(", ", from i in ds
                                      select "Int" + i.ToString(CultureInfo.InvariantCulture)),
            TStrs = string.Join(", ", from i in ds
                                      select "Str" + i.ToString(CultureInfo.InvariantCulture)),
        }) { #>

        public class ChoiceOf<#= d.Text #>
        {<#
        foreach (var n in
            from n in d.Seq
            select new
            {
                Ord   = n,
                Text  = n.ToString(CultureInfo.InvariantCulture),
                Match = new Func<Func<int, string>, string>(f =>
                    string.Join(", ",
                        from i in Enumerable.Range(1, d.Ord)
                        select i == n ? f(i) : "_ => throw BadChoice()"))
            }) { #>

            [Test]
            public void Choice<#= n.Text #>()
            {
                var c = Choice<#= n.Text #><<#= d.TInts #>>(42);
                Assert.That(c, Is.Not.Null);
                var result = c.Match(<#= n.Match(_ => "x => x.Value") #>);
                Assert.That(result, Is.EqualTo(42));
            }

            [Test]
            public void Map<#= n.Text #>()
            {
                var c = Choice<#= n.Text #><<#= d.TInts #>>(42);
                Assert.That(c, Is.Not.Null);
                var result = c.Map<#= n.Text #>(x => x.Value.ToString("x"))
                              .Match(<#= n.Match(_ => "x => x") #>);
                Assert.That(result, Is.EqualTo("2a"));
            }

            [Test]
            public void Choice<#= n.Text #>ToString()
            {
                var actual = Choice<#= n.Text #><<#= d.TInts #>>(42).ToString();
                Assert.That(actual, Is.EqualTo("42"));
            }

            [Test]
            public void Choice<#= n.Text #>Map()
            {
                var c = Choice<#= n.Text #><<#= d.TInts #>>(42);
                Assert.That(c, Is.Not.Null);
                var result = c.Map<<#= d.TInts #>, <#= d.TStrs #>>(<#= n.Match(_ => "x => new Str" + n.Text + "(x.Value.ToString(\"x\"))") #>);
                Assert.That(result, Is.EqualTo(Choice<#= n.Text #><<#= d.TStrs #>>(new Str<#= n.Text #>("2a"))));
            }

            public class Choice<#= n.Text #>Equality
            {
                [Test]
                public void Null()
                {
                    var choice = Choice<#= n.Text #><<#= d.TInts #>>(42);
                    Assert.False(choice.Equals((object) null));
                    Assert.False(choice.Equals(null));
                }

                [Test]
                public void Self()
                {
                    var choice = Choice<#= n.Text #><<#= d.TInts #>>(42);
                    Assert.True(choice.Equals((object) choice));
                    Assert.True(choice.Equals(choice));
                }

                [Test]
                public void Value()
                {
                    var x = Choice<#= n.Text #><<#= d.TInts #>>(42);
                    var y = Choice<#= n.Text #><<#= d.TInts #>>(42);
                    Assert.True(x.Equals((object) y));
                    Assert.True(x.Equals(y));
                }
            }

            public class Choice<#= n.Text #>Inequality
            {
                [Test]
                public void OtherType()
                {
                    var choice = Choice<#= n.Text #><<#= d.TInts #>>(42);
                    Assert.False(choice.Equals(new object()));
                }

                [Test]
                public void OtherChoice()
                {
                    var choice1 = Choice<#= n.Text #><<#= d.TInts #>>(42);
                    var choice2 = Choice<#= n.Ord == 1 ? "2" : "1" #><<#= d.TInts #>>(42);
                    Assert.False(choice1.Equals(choice2));
                }

                [Test]
                public void OtherValue()
                {
                    var x = Choice<#= n.Text #><<#= d.TInts #>>(4);
                    var y = Choice<#= n.Text #><<#= d.TInts #>>(2);
                    Assert.False(x.Equals((object) y));
                    Assert.False(x.Equals(y));
                }
            }
<#      } #>

            [Test]
            public void TuplesToChoices()
            {
                var choices = Tuple.Create<<#= d.TInts #>>(<#=
                    string.Join(", ", from i in d.Seq select i.ToString(CultureInfo.InvariantCulture)) #>).ToChoices();

                Assert.That(choices, Is.EqualTo(new[]
                {
<#      foreach (var i in d.Seq) { #>
                    Choice<#= i.ToString(CultureInfo.InvariantCulture) #><<#= d.TInts #>>(<#= i.ToString(CultureInfo.InvariantCulture) #>),
<#      } #>
                }));
            }

            [Test]
            public void ValueTuplesToChoices()
            {
                var choices = (<#=
                    string.Join(", ", from i in d.Seq
                                      select i.ToString(CultureInfo.InvariantCulture) into i
                                      select "(Int" + i + ") " + i) #>).ToChoices();

                Assert.That(choices, Is.EqualTo(new[]
                {
<#      foreach (var i in d.Seq) { #>
                    Choice<#= i.ToString(CultureInfo.InvariantCulture) #><<#= d.TInts #>>(<#= i.ToString(CultureInfo.InvariantCulture) #>),
<#      } #>
                }));
            }
        }
<#  } #>
    }
}
